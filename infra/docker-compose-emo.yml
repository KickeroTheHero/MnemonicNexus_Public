# MnemonicNexus - EMO Alpha Base Docker Compose
# Extends base docker-compose.yml with EMO-specific services

version: '3.8'

services:
  # EMO Hybrid Search Service
  search-hybrid:
    build: ../services/search
    ports:
      - "8087:8087"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/nexus
      - LMSTUDIO_ENDPOINT=http://host.docker.internal:1234/v1/embeddings
      - LMSTUDIO_MODEL=text-embedding-nomic-embed-text-v1.5
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - nexus-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8087/health')"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: unless-stopped
    labels:
      - "mnx.service=search-hybrid"
      - "mnx.version=alpha"

  # Memory-to-EMO Translator Projector
  projector-translator:
    build: 
      context: ..
      dockerfile: projectors/translator_memory_to_emo/Dockerfile
    container_name: nexus-projector-translator
    environment:
      - PROJECTOR_DATABASE_URL=postgresql://postgres:postgres@postgres:5432/nexus
      - PROJECTOR_PORT=8000
      - PROJECTOR_HOST=0.0.0.0
      - LOG_LEVEL=INFO
    ports:
      - "8088:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - nexus-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    labels:
      - "mnx.service=projector-translator"
      - "mnx.version=alpha"

  # EMO Publisher Extension (add translator to endpoints)
  publisher:
    environment:
      CDC_PROJECTOR_ENDPOINTS: http://projector-rel:8000,http://projector-graph:8000,http://projector-sem:8000,http://projector-translator:8000

  # Observability stack for EMO monitoring  
  prometheus:
    image: prom/prometheus:latest
    container_name: nexus-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    networks:
      - nexus-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: nexus-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ../monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ../monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - nexus-network
    restart: unless-stopped

volumes:
  prometheus_data:
  grafana_data:
